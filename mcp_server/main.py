# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:26:12+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import Error400, Error500, LocationAnalyticsCategoryRatedAreasGetResponse

app = MCPProxy(
    description='Before using this API, we recommend you read our\xa0**[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)**\xa0for more information on how to generate an access token. \n  \nPlease also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.',
    title='Location Score',
    version='1.0.2',
    servers=[{'url': 'https://test.api.amadeus.com/v1'}],
)


@app.get(
    '/location/analytics/category-rated-areas', tags=['category_rating_management']
)
def get_category_rated_areas(latitude: float, longitude: float = ...):
    """
    GET category rated areas
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
